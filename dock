#!/bin/bash
VERSION=1.5.5
echo "DOCK v.$VERSION"
echo "Help programm with docker"
echo "Install whiptail [sudo apt install whiptail]"
echo "Copy to project dir and run ./dock"

OPTION='?' 
OPTION2='?' 

function checkOption2 {
	if [ -z $OPTION2 ]; then
		OPTION2='?' 
	fi
}

function mainMenu {
	OPTION=$(whiptail --title  "Система управления docker-compose $VERSION" --menu  "Команды" 20 60 10 \
	"composeup" "Поднять compose" \
	"composedown" "Остановить compose" \
	"composeimages" "Список образов" \
	"containers" "Контейнеры" \
	"images" "Образы" \
	"networks" "Сети" \
	"volumes" "Тома" \
	"infos" Информация \
	"dockerfile" "Dockerfile" \
	3>&1 1>&2 2>&3)
}

function networksMenu {
	OPTION2=$(whiptail --title  "Сети" --menu  "Команды" 20 60 10 \
	"ls" "Список сетей" \
	"inspect" "Информация о сети" \
	"rm" "Удаление сети" \
	3>&1 1>&2 2>&3)
}

function dockerfileMenu {
	OPTION2=$(whiptail --title  "Система управения docker $VERSION" --menu  "Команды" 20 60 10 \
	"build" "Собрать из Dockerfile" \
	3>&1 1>&2 2>&3)
}

function imagesMenu {
	OPTION2=$(whiptail --title  "Образы" --menu  "Команды" 20 60 10 \
	"images" "Список всех образов" \
	"rmimage" "Удалить образ" \
	3>&1 1>&2 2>&3)
}

function infosMenu {
	OPTION2=$(whiptail --title  "Система управения docker $VERSION" --menu  "Команды" 20 60 10 \
	"info" "Информация" \
	"version" "Версия" \
	3>&1 1>&2 2>&3)
}

function containersMenu {
	OPTION2=$(whiptail --title  "Контейнеры" --menu  "Команды" 20 60 10 \
	"ps" "Список контейнеров" \
	"psshort" "Список контейнеров (ID NAME)" \
	"psa" "Список ВСЕХ контейнеров" \
	"logs" "Лог контейнера" \
	"logsa" "Лог OFF контейнеров" \
	"stop" "Остановить контейнер" \
	"bash" "Bash в контейнере" \
	"rm" "Удалить контейнер" \
	"rma" "Удалить OFF контейнер" \
	3>&1 1>&2 2>&3)
}

function volumesMenu {
	OPTION2=$(whiptail --title  "Тома" --menu  "Команды" 20 60 10 \
	"ls" "Список томов" \
	"inspect" "Информация о томе" \
	3>&1 1>&2 2>&3)
}

function pressKey {
	read -sn 1 -p 'Press any key to continue...';echo
}

function rmContainer {
	path1=$1
	res=""
	for entry in $path1
	do
		ID=$(echo $entry | cut -d ":" -f 1)
		NAME=$(echo $entry | cut -d ":" -f 2)
		res=${res}${ID}" "${NAME}" OFF "
	done
	
	DISTROS=$(whiptail --title  "Выбор контейнера" --radiolist \
	"Выберите контейнер?" 25 85 18 $res 3>&1 1>&2 2>&3)
	exitstatus=$?

	if [ "$DISTROS" ];  then
		docker rm $DISTROS
	fi
}

function logContainer {
	path1=$1
	res=""
	for entry in $path1
	do
		ID=$(echo $entry | cut -d ":" -f 1)
		NAME=$(echo $entry | cut -d ":" -f 2)
		res=${res}${ID}" "${NAME}" OFF "
	done
	
	DISTROS=$(whiptail --title  "Выбор контейнера" --radiolist \
	"Выберите контейнер?" 25 85 18 $res 3>&1 1>&2 2>&3)
	exitstatus=$?

	if [ "$DISTROS" ];  then
		docker logs $DISTROS
	fi
}

curdir=$(pwd)

function main {
	
	estatus=0
	##echo $curdir
	while [ $estatus = 0 ]
	do
		mainMenu
		estatus=$?
		##echo "Статус операции "$estatus		
		if [ $estatus = 1 ];  then
			exit
		fi

		if [ $OPTION = "volumes" ];  then
			volumesMenu
			checkOption2

			if [ $OPTION2 = "ls" ];  then
				docker volume ls
				pressKey
				continue
			fi

			if [ $OPTION2 = "inspect" ];  then
				path1=$(docker volume ls --format '{{.Driver}}:{{.Name}}')
				for entry in $path1
				do
					ID=$(echo $entry | cut -d ":" -f 1)
					NAME=$(echo $entry | cut -d ":" -f 2)
					res=${res}${NAME}" "${ID}" OFF "
				done

				DISTROS=$(whiptail --title  "Выбор тома" --radiolist \
				"Выберите том?" 25 85 18 $res 3>&1 1>&2 2>&3)
				exitstatus=$?
				
				if [ "$DISTROS" ];  then
					docker volume inspect $DISTROS
					pressKey
					continue
				fi
			fi
		fi

		if [ $OPTION = "networks" ];  then
			networksMenu
			checkOption2
			##docker ps
			if [ $OPTION2 = "ls" ];  then
				docker network ls
				pressKey
				continue
			fi

			if [ $OPTION2 = "inspect" ];  then
				path1=$(docker network ls --format '{{.ID}}:{{.Name}}')
				res=""
				for entry in $path1
				do
					ID=$(echo $entry | cut -d ":" -f 1)
					NAME=$(echo $entry | cut -d ":" -f 2)
					res=${res}${ID}" "${NAME}" OFF "
				done
				
				DISTROS=$(whiptail --title  "Выбор сети" --radiolist \
				"Выберите сеть?" 25 85 18 $res 3>&1 1>&2 2>&3)
				exitstatus=$?

				docker network inspect $DISTROS
				pressKey
				continue
			fi

			if [ $OPTION2 = "rm" ];  then
				path1=$(docker network ls --format '{{.ID}}:{{.Name}}')
				res=""
				for entry in $path1
				do
					ID=$(echo $entry | cut -d ":" -f 1)
					NAME=$(echo $entry | cut -d ":" -f 2)
					res=${res}${ID}" "${NAME}" OFF "
				done
				
				DISTROS=$(whiptail --title  "Выбор сети" --radiolist \
				"Выберите сеть для удаления?" 25 85 18 $res 3>&1 1>&2 2>&3)
				exitstatus=$?

				docker network rm $DISTROS
				pressKey
				continue
			fi
		fi

		if [ $OPTION = "containers" ];  then
			containersMenu
			checkOption2
			if [ $OPTION2 = "ps" ];  then
				docker ps
				pressKey
				continue
			fi

			if [ $OPTION2 = "psa" ];  then
				docker ps -a
				pressKey
				continue
			fi

			if [ $OPTION2 = "psshort" ];  then
				docker ps --format '{{.ID}} {{.Names}}'
				pressKey
				continue
			fi

			if [ $OPTION2 = "stop" ];  then
				path1=$(docker ps --format '{{.Names}}')
				res=""
				for entry in $path1
				do
					res=${res}${entry}" "${entry}" OFF "
				done
				
				DISTROS=$(whiptail --title  "Выбор контейнера" --radiolist \
				"Выберите контейнер?" 25 85 18 $res 3>&1 1>&2 2>&3)
				exitstatus=$?

				docker stop $DISTROS
				pressKey
				continue
			fi

			if [ $OPTION2 = "rm" ];  then
				path1=$(docker ps --format '{{.ID}}:{{.Names}}')
				rmContainer "$path1"
				pressKey
				continue
			fi

			if [ $OPTION2 = "rma" ];  then
				path1=$(docker ps -a --format '{{.ID}}:{{.Names}}')
				rmContainer "$path1"
				pressKey
				continue
			fi

			if [ $OPTION2 = "logs" ];  then
				path1=$(docker ps --format '{{.ID}}:{{.Names}}')
				logContainer "$path1"
				pressKey
				continue
			fi

			if [ $OPTION2 = "logsa" ];  then
				path1=$(docker ps -a --format '{{.ID}}:{{.Names}}')
				logContainer "$path1"
				pressKey
				continue
			fi

			if [ $OPTION2 = "bash" ];  then
				path1=$(docker-compose ps --format '{{.Service}}:{{.Names}}')
				res=""
				for entry in $path1
				do
					ID=$(echo $entry | cut -d ":" -f 1)
					NAME=$(echo $entry | cut -d ":" -f 2)
					res=${res}${ID}" "${NAME}" OFF "
				done
				
				DISTROS=$(whiptail --title  "Выбор сервиса" --radiolist \
				"Выберите сервис?" 25 85 18 $res 3>&1 1>&2 2>&3)
				exitstatus=$?

				if [ "$DISTROS" ];  then
					docker-compose exec $DISTROS bash 
				fi

				pressKey
				continue
			fi
			##echo $OPTION2
			##pressKey
			continue
		fi

		if [ $OPTION = "composeup" ];  then
			docker-compose up -d
			exit
			continue
		fi

		if [ $OPTION = "composedown" ];  then
			docker-compose down 
			exit
			continue
		fi

		if [ $OPTION = "composeimages" ];  then
				docker compose images
				pressKey
				continue
		fi

		if [ $OPTION = "dockerfile" ];  then
			dockerfileMenu
			checkOption2
			if [ $OPTION2 = "build" ];  then
				docker build - < Dockerfile 
				exit
				continue
			fi
			continue
		fi
		
		if [ $OPTION = "infos" ];  then
			infosMenu
			checkOption2
			if [ $OPTION2 = "info" ] || [ $OPTION2 = "version" ];  then
				docker $OPTION2
				pressKey
				continue
			fi
			continue
		fi

		if [ $OPTION = "images" ];  then
			imagesMenu
			checkOption2
			if [ $OPTION2 = "images" ];  then
				docker images
				pressKey
				continue
			fi

			if [ $OPTION2 = "rmimage" ];  then
				#docker rm images
				#docker images --format {{.ID}}
				#path1=$(docker images --format '{{.ID}}')
				path1=$(docker images --format '{{.ID}}:"{{.Repository}}-{{.Tag}}"')
				res=""
				for entry in $path1
				do
					ID=$(echo $entry | cut -d ":" -f 1)
					NAME=$(echo $entry | cut -d ":" -f 2)
					res=${res}${ID}" "${NAME}" OFF "
				done
				
				DISTROS=$(whiptail --title  "Выбор образа" --radiolist \
				"Выберите проект?" 25 85 18 $res 3>&1 1>&2 2>&3)
				exitstatus=$?

				if [ "$DISTROS" ];  then
					docker image rm $DISTROS
				fi

				##pressKey
				continue
			fi
		fi
		##mainFunctions
	done
}

main 
