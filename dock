#!/bin/bash
VERSION=1.4
echo "DOCK v.$VERSION"
echo "Help programm with docker"
echo "Copy to project dir and run ./dock"

function mainMenu {
	OPTION=$(whiptail --title  "Система управения docker $VERSION" --menu  "Команды" 20 60 10 \
	"composeup" "Поднять compose" \
	"composedown" "Остановить compose" \
	"composeimages" "Список образов" \
	"ps" "Список контейнеров" \
	"psshort" "Список контейнеров (ID NAME)" \
	"logcontainer" "Лог контейнера" \
	"stop" "Остановить контейнер" \
	"bash" "Bash в контейнере" \
	"images" "Список всех образов" \
	"rmimage" "Удалить образ" \
	"info" "Информация" \
	"version" "Версия" \
	"build" "Собрать из Dockerfile" \
	3>&1 1>&2 2>&3)
}

function pressKey {
	read -sn 1 -p 'Press any key to continue...';echo
}

curdir=$(pwd)

function main {
	
	estatus=0
	##echo $curdir
	while [ $estatus = 0 ]
	do
		mainMenu
		estatus=$?
		##echo "Статус операции "$estatus		
		if [ $estatus = 1 ];  then
			exit
		fi
		
		if [ $OPTION = "ps" ];  then
			docker ps
			pressKey
			continue
		fi
		
		if [ $OPTION = "psshort" ];  then
			docker ps --format '{{.ID}} {{.Names}}'
			pressKey
			continue
		fi

		if [ $OPTION = "composeup" ];  then
			docker-compose up -d
			exit
			continue
		fi

		if [ $OPTION = "composedown" ];  then
			docker-compose down 
			exit
			continue
		fi

		if [ $OPTION = "build" ];  then
			docker build - < Dockerfile 
			exit
			continue
		fi
		
		if [ $OPTION = "stop" ];  then
			path1=$(docker ps --format '{{.Names}}')
			res=""
			for entry in $path1
			do
			  res=${res}${entry}" "${entry}" OFF "
			done
			
			DISTROS=$(whiptail --title  "Выбор образа" --radiolist \
			"Выберите проект?" 25 85 18 $res 3>&1 1>&2 2>&3)
			exitstatus=$?

			docker stop $DISTROS
			pressKey
			continue
		fi
		
		if [ $OPTION = "images" ] || [ $OPTION = "info" ] || [ $OPTION = "version" ];  then
			docker $OPTION
			pressKey
			continue
		fi

		if [ $OPTION = "composeimages" ];  then
			docker compose images
			pressKey
			continue
		fi

		if [ $OPTION = "rmimage" ];  then
			#docker rm images
			#docker images --format {{.ID}}
			#path1=$(docker images --format '{{.ID}}')
			path1=$(docker images --format '{{.ID}}:"{{.Repository}}-{{.Tag}}"')
			res=""
			for entry in $path1
			do
			  ID=$(echo $entry | cut -d ":" -f 1)
			  NAME=$(echo $entry | cut -d ":" -f 2)
			  res=${res}${ID}" "${NAME}" OFF "
			done
			
			DISTROS=$(whiptail --title  "Выбор образа" --radiolist \
			"Выберите проект?" 25 85 18 $res 3>&1 1>&2 2>&3)
			exitstatus=$?

			if [ "$DISTROS" ];  then
			  docker image rm $DISTROS
			fi

			pressKey
			continue
		fi

		if [ $OPTION = "logcontainer" ];  then
			#docker rm images
			#docker images --format {{.ID}}
			#path1=$(docker images --format '{{.ID}}')
			##path1=$(docker images --format '{{.ID}}:"{{.Repository}}-{{.Tag}}"')
			path1=$(docker ps --format '{{.ID}}:{{.Names}}')
			res=""
			for entry in $path1
			do
			  ID=$(echo $entry | cut -d ":" -f 1)
			  NAME=$(echo $entry | cut -d ":" -f 2)
			  res=${res}${ID}" "${NAME}" OFF "
			done
			
			DISTROS=$(whiptail --title  "Выбор контейнера" --radiolist \
			"Выберите контейнер?" 25 85 18 $res 3>&1 1>&2 2>&3)
			exitstatus=$?

			if [ "$DISTROS" ];  then
			  docker logs $DISTROS
			fi

			pressKey
			continue
		fi

		if [ $OPTION = "bash" ];  then
			path1=$(docker-compose ps --format '{{.Service}}:{{.Names}}')
			res=""
			for entry in $path1
			do
			  ID=$(echo $entry | cut -d ":" -f 1)
			  NAME=$(echo $entry | cut -d ":" -f 2)
			  res=${res}${ID}" "${NAME}" OFF "
			done
			
			DISTROS=$(whiptail --title  "Выбор сервиса" --radiolist \
			"Выберите сервис?" 25 85 18 $res 3>&1 1>&2 2>&3)
			exitstatus=$?

			if [ "$DISTROS" ];  then
			  docker-compose exec $DISTROS bash 
			fi

			pressKey
			continue
		fi
		##mainFunctions
	done
}

main 
